//
// Build bundles with online resources for fast access in HALE.
//
// It should be executed manually to update the resource bundles from time to
// time, e.g. using this command from the repository root:
// > ./gradlew -p modules/resources/
//

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'de.undercouch:gradle-download-task:5.5.0'
	}
}

apply plugin: 'de.undercouch.download'



defaultTasks 'clean', 'resourceBundles'

ext {
	// where inspire schemas are downloaded to
	inspireSchemas = new File(buildDir, 'inspire-schemas.zip')
	// inspire application schemas index file
	applicationSchemasFile = new File(buildDir, 'applicationSchemas.xml')
	// where w3 schemas are downloaded to
	w3Schemas = new File(buildDir, 'w3-schemas.zip')
	// where inspire code lists are stored after download
	inspireCodeListsFixed = new File(buildDir, 'inspire-codelists-fixed.zip')
	inspireCodeListsGeneric = new File(buildDir, 'inspire-codelists-generic.zip')
	// where schemas from portele.de are stored after download
	porteleSchemas = new File(buildDir, 'portele-schemas.zip')
	// where inspire feature concept files are downloaded to
	inspireFeatureConcepts = new File(buildDir, 'inspire-feature-concepts.zip')
	// where AAA NAS schema files are downloaded to
	aaaSchemas = new File(buildDir, 'aaa-nas-schemas.zip')
	// where XPlanung schema files are downloaded to
	xPlanungSchemas = new File(buildDir, 'xplanung-schemas.zip')
}

task clean() {
	doLast {
		buildDir.deleteDir()
	}
}

task resourceBundles() {
}

/*
 * Creates a resource bundle from ZIP archive provided on schemas.opengis.net
 */

task opengisBundle(type: ResourceBundleTask) {
	bundleId = 'schemas.opengis.net'
	host = 'schemas.opengis.net'
	archiveUrl = 'http://schemas.opengis.net/SCHEMAS_OPENGIS_NET.zip'
	destDir = projectDir
}

resourceBundles.dependsOn('opengisBundle')

/*
 * Creates a resource bundle from schemas provided in INSPIRE schema repository
 */

// create application schema index file
def inspireSchemaIndex(def project, File target, List<File> folders) {
	// get application schemas from INSPIRE registry
	def registry
	new URL('https://inspire.ec.europa.eu/applicationschema/applicationschema.en.json').withReader { reader ->
		registry = new groovy.json.JsonSlurper().parse(reader)
	}
	def appSchemas = []
	registry.register.containeditems*.applicationschema.each {
		def theme = it.theme
		if (!theme) {
			theme = it.themes?.getAt(0)?.theme
		}

		appSchemas << [id: it.id, name: it.label.text, theme: theme?.label?.text, themeId: theme?.id]
	}

	def inspireShortIdRegex = '^http://inspire.ec.europa.eu/applicationschema/([^/]*)$'

	target.withWriter {
		it << '<?xml version="1.0"?>\n'
		def xml = new groovy.xml.MarkupBuilder(it)
		xml.applicationSchemas {
			appSchemas.each { appSchema ->
				xml.applicationSchema(id: appSchema.id, name: appSchema.name, theme: appSchema.theme,
						themeId: appSchema.themeId) {
					// find corresponding schema files

					// extract short identifier
					def matcher = ( appSchema.id =~ inspireShortIdRegex )
					def shortId = matcher[0][1]

					// replace abandoned(?) Geology schema with Geology core
					if (shortId == 'ge') shortId = 'ge-core'

					folders.each { File folder ->
						File asDir = new File(folder, shortId)
						if (asDir.exists()) {
							// find version subfolders
							asDir.eachDir { File versionDir ->
								versionDir.eachFileMatch(~/.*\.xsd/) { File xsd ->
									xml.schema(
										version: versionDir.name,
										url: "https://inspire.ec.europa.eu/${folder.name}/${asDir.name}/${versionDir.name}/${xsd.name}"
									)
								}
							}
						}
					}
				}
			}
		}
	}
}

// download schema files based on directory listing (requires wget)
task downloadInspireSchemas() {
	doFirst {
		// need a clean tmp dir
		temporaryDir.deleteDir()
		temporaryDir.mkdir()
		// delete existing schema archive
		inspireSchemas.delete()

		exec {
			workingDir = temporaryDir
			executable = 'wget'
			args '-e', 'robots=off', '-r', '--no-parent', '--no-host-directories', '-A', 'xsd,xml,txt', 'https://inspire.ec.europa.eu/schemas/'
		}
		exec {
			workingDir = temporaryDir
			executable = 'wget'
			args '-e', 'robots=off', '-r', '--no-parent', '-X', 'draft-schemas/geoportal', '--no-host-directories', '-A', 'xsd,xml,txt', 'https://inspire.ec.europa.eu/draft-schemas/'
		}
		// add fixups
		copy {
			from new File(projectDir, 'inspire-fixup')
			into temporaryDir
			include '**/*'
		}
		// generate schema index file
		inspireSchemaIndex(project, applicationSchemasFile,
			[new File(temporaryDir, 'schemas')]
		)
		// copy to be included in bundle
		copy {
			from buildDir
			into temporaryDir
			include 'applicationSchemas.xml'
		}
		// create ZIP archive
		ant.zip(
			destfile: inspireSchemas,
			basedir: temporaryDir)
	}
}

// create the bundle
task inspireSchemasBundle(type: ResourceBundleTask, dependsOn: downloadInspireSchemas) {
	bundleId = 'schemas.inspire'
	host = 'inspire.ec.europa.eu'
	archive = inspireSchemas
	destDir = projectDir
	pluginExtra = { xml ->
		// read application schemas file
		def appSchemas = new groovy.xml.XmlSlurper().parse(applicationSchemasFile)

		def themeShortIdRegex = '^http://inspire.ec.europa.eu/theme/([^/]*)$'

		xml.extension(point: 'eu.esdihumboldt.hale.ui.schema.presets') {
			println appSchemas
			appSchemas.applicationSchema.each { appSchema ->
				def id = appSchema.@id

				appSchema.schema.each { schema ->
					def theme = appSchema.@theme as String
					def descr = theme ? "GML Application Schema from the INSPIRE Data Specification on ${theme}." : "Application Schema from the INSPIRE Data Specifications (not associated to a theme)."

					def themeId = appSchema.@themeId as String
					def iconPath = 'icons/inspire.gif'
					if (themeId) {
						// extract short identifier
						def matcher = ( themeId =~ themeShortIdRegex )
						def shortId = matcher[0][1]

						iconPath = "icons/themes/16_${shortId}.png"
					}

					xml.schema(
						description: descr,
						icon: iconPath,
						id: id,
						name: "INSPIRE ${appSchema.'@name'}",
//						tag: 'Bundled',
						version: schema.@version
					) {
						xml.uri(value: schema.@url)
					}
				}
			}
		}
	}
}

resourceBundles.dependsOn('inspireSchemasBundle')

/*
 * Creates a resource bundle from code lists provided in INSPIRE code list registry
 */

// download code list files based on registry (requires wget, XML content type)
task downloadInspireCodeLists {
	doLast {
		// need a clean tmp dir
		temporaryDir.deleteDir()
		temporaryDir.mkdir()
		// delete existing archives
		inspireCodeListsFixed.delete()
		inspireCodeListsGeneric.delete()

		// determine resources to retrieve from registry
		def registry
		new URL('https://inspire.ec.europa.eu/codelist/codelist.en.json').withReader { reader ->
			registry = new groovy.json.JsonSlurper().parse(reader)
		}

		def languages = ['en', 'bg', 'cs', 'hr', 'da', 'de', 'el', 'es', 'et', 'fi', 'fr',
			'hu', 'it', 'lt', 'lv', 'mt', 'nl', 'pl', 'pt', 'ro', 'sk', 'sl', 'sv']

		def genericUrls = []
		def fixedUrls = []
		registry.register.containeditems*.codelist.id.each { id ->
			// the ID is the URI to retrieve the code list by default
			genericUrls << id
			// extract code list name
			def regex = '/([^/]*)$'
			def matcher = ( id =~ regex )
			def name = matcher[0][1]
			// add fixed urls TODO in all languages?
			fixedUrls << "${id}/${name}.en.xml"
			fixedUrls << "${id}/${name}.en.json"
		}

		// problem is, we can't download both generic and fixed,
		// because the fixed URLs require a directory with the name
		// of the generic URL -> so we create two archives/bundles

		def genericDir = new File(temporaryDir, "generic")
		genericDir.mkdirs()
		genericUrls.each { url ->
			exec {
				workingDir = genericDir
				executable = 'wget'
				args '--force-directories', '--no-host-directories', "--header=Accept: application/xml", "--header=Accept-Language: en", url
			}
		}

		def fixedDir = new File(temporaryDir, "fixed")
		fixedDir.mkdirs()
		fixedUrls.each { url ->
			exec {
				workingDir = fixedDir
				executable = 'wget'
				args '--force-directories', '--no-host-directories', url
			}
		}

		// create ZIP archives
		ant.zip(
			destfile: inspireCodeListsGeneric,
			basedir: genericDir)
		ant.zip(
			destfile: inspireCodeListsFixed,
			basedir: fixedDir)
	}
}

// create the bundles
task inspireCodeListsBundleGeneric(type: ResourceBundleTask, dependsOn: downloadInspireCodeLists) {
	bundleId = 'codelists.inspire.accept-xml'
	host = 'inspire.ec.europa.eu'
	archive = inspireCodeListsGeneric
	destDir = projectDir
	resourceType = 'xmlCodeList'
}
task inspireCodeListsBundleFixed(type: ResourceBundleTask, dependsOn: downloadInspireCodeLists) {
	bundleId = 'codelists.inspire'
	host = 'inspire.ec.europa.eu'
	archive = inspireCodeListsFixed
	destDir = projectDir
	resourceType = 'xmlCodeList'
}

resourceBundles.dependsOn('inspireCodeListsBundleGeneric')
resourceBundles.dependsOn('inspireCodeListsBundleFixed')

/*
 * Creates a resource bundle from schemas provided on www.w3.org (which can be very slow to access)
 */

// download schema files individually (requires wget)
task downloadW3Schemas {
	doLast {
		// need a clean tmp dir
		temporaryDir.deleteDir()
		temporaryDir.mkdir()
		// delete existing schema archive
		w3Schemas.delete()

		def downloadSchema = { path ->
			exec {
				workingDir = temporaryDir
				executable = 'wget'
				args '--force-directories', '--no-host-directories', "http://www.w3.org/$path"
			}
		}
		downloadSchema('1999/xlink.xsd')
		downloadSchema('2001/xml.xsd')
		downloadSchema('2001/XMLSchema.xsd')
		ant.zip(
			destfile: w3Schemas,
			basedir: temporaryDir)
	}
}

// create the bundle
task w3SchemasBundle(type: ResourceBundleTask, dependsOn: downloadW3Schemas) {
	bundleId = 'w3.org'
	host = 'www.w3.org'
	archive = w3Schemas
	destDir = projectDir
}

resourceBundles.dependsOn('w3SchemasBundle')

/*
 * Creates a resource bundle including the FeatureConcept information from the
 * INSPIRE registry, which is used in HALE when generating an INSPIRE Dataset Feed.
 */

// download JSON representation (requires wget)
task downloadInspireFeatureConcepts {
	doLast {
		// need a clean tmp dir
		temporaryDir.deleteDir()
		temporaryDir.mkdir()
		// delete existing schema archive
		inspireFeatureConcepts.delete()

		def downloadFile = { path ->
			exec {
				workingDir = temporaryDir
				executable = 'wget'
				args '--force-directories', '--no-host-directories', "https://inspire.ec.europa.eu/featureconcept/$path"
			}
		}
		downloadFile('featureconcept.en.json')
		ant.zip(
			destfile: inspireFeatureConcepts,
			basedir: temporaryDir)
	}
}

// create the bundle
task inspireFeatureConceptsBundle(type: ResourceBundleTask, dependsOn: downloadInspireFeatureConcepts) {
	bundleId = 'featureconcepts.inspire'
	host = 'inspire.ec.europa.eu'
	archive = inspireFeatureConcepts
	destDir = projectDir
	//TODO resource type?
}

resourceBundles.dependsOn('inspireFeatureConceptsBundle')

/*
 * Creates a resource bundle from schemas provided on portele.de (which are needed by some INSPIRE schemas)
 */

// download schema files individually (requires wget)
task downloadPorteleSchemas {
	doLast {
		// need a clean tmp dir
		temporaryDir.deleteDir()
		temporaryDir.mkdir()
		// delete existing schema archive
		porteleSchemas.delete()

		def downloadSchema = { path ->
			exec {
				workingDir = temporaryDir
				executable = 'wget'
				args '--force-directories', '--no-host-directories', "http://portele.de/$path"
			}
		}
		downloadSchema('ShapeChangeAppinfo.xsd')
		ant.zip(
			destfile: porteleSchemas,
			basedir: temporaryDir)
	}
}

// create the bundle
task porteleSchemasBundle(type: ResourceBundleTask, dependsOn: downloadPorteleSchemas) {
	bundleId = 'schemas.portele.de'
	host = 'portele.de'
	archive = porteleSchemas
	destDir = projectDir
}

resourceBundles.dependsOn('porteleSchemasBundle')

/*
 * Creates a resource bundle from AAA NAS application schemas
 */

// Map version number used in URLs to version number displayed to user
def aaaVersions = [
	/*
	 * XXX the versions offered on the repository seem to be subject to change
	 */

	'6.0' : '6.0.1',
	// '7.0' : '7.0.3', no longer available directly as schema files (though there seem to be archives of versions that were dropped at https://repository.gdi-de.org/schemas/adv/nas/)
	'7.1' : '7.1.2' // was: 7.1.0
]

def wfsExtVersions = [ '1.0', '2.0' ]
def shapeChangeVersions = [ '1.0' ]

// download schema files based on directory listing (requires wget)
task downloadAAASchemas {
	doLast {
		// need a clean tmp dir
		temporaryDir.deleteDir()
		temporaryDir.mkdir()
		// delete existing schema archive
		aaaSchemas.delete()

		aaaVersions.each { urlVersion, displayVersion ->
			exec {
				workingDir = temporaryDir
				executable = 'wget'
				args '-e', 'robots=off', '-r', '--no-parent', '--no-host-directories', '-A', 'xsd,xml,txt', "http://repository.gdi-de.org/schemas/adv/nas/${urlVersion}/"
			}
		}
		wfsExtVersions.each { version ->
			exec {
				workingDir = temporaryDir
				executable = 'wget'
				args '-e', 'robots=off', '-r', '--no-parent', '--no-host-directories', '-A', 'xsd,xml,txt', "http://repository.gdi-de.org/schemas/adv/wfsext/${version}/"
			}
		}
		shapeChangeVersions.each { version ->
			exec {
				workingDir = temporaryDir
				executable = 'wget'
				args '-e', 'robots=off', '-r', '--no-parent', '--no-host-directories', '-A', 'xsd,xml,txt', "http://repository.gdi-de.org/schemas/adv/sc/${version}/"
			}
		}

		// create ZIP archive
		ant.zip(
			destfile: aaaSchemas,
			basedir: temporaryDir)
	}
}

// create the bundle
task aaaSchemasBundle(type: ResourceBundleTask, dependsOn: downloadAAASchemas) {
	bundleId = 'schemas.adv-online.de'
	host = 'repository.gdi-de.org'
	archive = aaaSchemas
	destDir = projectDir
	pluginExtra = { xml ->
		xml.extension(point: 'eu.esdihumboldt.hale.ui.schema.presets') {
			aaaVersions.each { urlVersion, displayVersion ->
				xml.schema(
					category: 'de',
					description: "AAA (ATKIS, ALKIS, AFIS) Modell der Arbeitsgemeinschaft der Vermessungsverwaltungen der Länder der Bundesrepublik Deutschland (AdV)",
					id: "de.adv-online.aaa.${urlVersion.replace('.', '_')}",
					name: "AAA XML Schema",
					version: "${displayVersion}"
				) {
					xml.uri(value: "http://repository.gdi-de.org/schemas/adv/nas/${urlVersion}/aaa.xsd")
				}
			}
		}
	}
}

resourceBundles.dependsOn('aaaSchemasBundle')

/*
 * Creates a resource bundle from XPlanung application schemas
 */

// Map version number used in URLs to version number displayed to user
def xplanungVersions = [
	'4.0.2' :'4.0.2',
	'4.1-Kernmodell' : '4.1',
	'5.0' : '5.0.1',
	'5.1' : '5.1.2',
	'5.2' : '5.2.1',
	'5.3' : '5.3',
	'5.4' : '5.4',
	'6.0' : '6.0'
]

// download schema files based on directory listing (requires wget)
task downloadXPlanungSchemas {
	doLast {
		// need a clean tmp dir
		temporaryDir.deleteDir()
		temporaryDir.mkdir()
		// delete existing schema archive
		xPlanungSchemas.delete()

		xplanungVersions.each { urlVersion, displayVersion ->
			exec {
				workingDir = temporaryDir
				executable = 'wget'
				args '-e', 'robots=off', '-r', '--no-parent', '--no-host-directories', '-A', 'xsd,xml,txt', "https://repository.gdi-de.org/schemas/de.xleitstelle.xplanung/${urlVersion}/"
			}
		}
		// add fixups
		copy {
			from new File(projectDir, 'xplanung-fixup')
			into temporaryDir
			include '**/*'
		}
		// create ZIP archive
		ant.zip(
			destfile: xPlanungSchemas,
			basedir: temporaryDir)
	}
}

// create the bundle
task xPlanungSchemasBundle(type: ResourceBundleTask, dependsOn: downloadXPlanungSchemas) {
	bundleId = 'schemas.xplanung.de'
	host = 'www.xplanungwiki.de'
	archive = xPlanungSchemas
	destDir = projectDir
	pluginExtra = { xml ->
		xml.extension(point: 'eu.esdihumboldt.hale.ui.schema.presets') {
			xplanungVersions.each { urlVersion, displayVersion ->
				xml.schema(
					category: 'de',
					description: "XPlanung GML Application Schema",
					icon: 'icons/xplanung.png',
					id: "de.xplanung.xplangml.${urlVersion.replace('.', '_')}",
					name: "XPlanGML",
					version: "${displayVersion}"
				) {
					xml.uri(value: "https://repository.gdi-de.org/schemas/de.xleitstelle.xplanung/${urlVersion}/XPlanung-Operationen.xsd")
				}
			}
		}
	}
}

resourceBundles.dependsOn('xPlanungSchemasBundle')

/*
 * Common task definition
 */

class ResourceBundleTask extends DefaultTask {
	// the host that the resource bundle mirrors resources from
	@Input
	def host
	// the remote URL to retrieve the resource ZIP archive from
	@Input
	@Optional
	def archiveUrl
	// the local ZIP archive file containing the resources
	@Input
	@Optional
	def archive
	// the prefix for the symbolic name
	@Input
	def symbolicNamePrefix = 'eu.esdihumboldt.util.resource'
	// the bundle identifier (is appended to prefix sepearate by a dot)
	@Input
	def bundleId
	// the served resource type
	@Input
	def resourceType = 'xmlSchema'
	// the destination dir
	@Input
	def destDir = project.buildDir
	// extra content for the plugin.xml - must be a closure taking a markup builder as argument
	@Internal
	java.util.function.Consumer<groovy.xml.MarkupBuilder> pluginExtra

	ResourceBundleTask() {
		getOutputs().upToDateWhen {
			// we don't support proper up-to-date checking here
			false
		}
	}

	@TaskAction
	def createBundle() {
		assert host
		assert archiveUrl || archive
		assert bundleId
		assert symbolicNamePrefix
		assert resourceType // the primary resource type
		assert destDir

		// schemas from schemas.opengis.net
		def stamp = new Date().format('yyyy.MM.dd')
		def version = stamp //"1.0.0.$stamp"
		def symbolicName = "$symbolicNamePrefix.$bundleId"
		File bundle = new File(destDir, "${symbolicName}_${version}.jar")

		File tmpDir = temporaryDir //File.createTempFile('resources', 'bundle')
		tmpDir.delete()
		tmpDir.mkdir()

		File tmpSchemas
		if (archive) {
			// use existing schema archive
			tmpSchemas = archive as File
		}
		else {
			// download schema archive
			tmpSchemas = new File(tmpDir, 'schemas.zip')
			project.download.run {
				src archiveUrl
				dest tmpSchemas
			}
		}

		// create plugin.xml
		File tmpPluginXml = new File(tmpDir, 'plugin.xml')
		tmpPluginXml.withWriter {
			it << '<?xml version="1.0"?>\n'
			it << '<?eclipse version="3.4"?>\n'
			def xml = new groovy.xml.MarkupBuilder(it)
			xml.plugin {
				extension(point: 'eu.esdihumboldt.util.resource') {
					resolver(id: bundleId, resourceType: resourceType) {
						xml.host(name: host)
						bundleResolver()
					}
				}
				if (pluginExtra != null) {
					pluginExtra.accept(xml)
				}
			}
		}

		// build jar
		ant.jar(destfile: bundle) {
			zipfileset (src: tmpSchemas, excludes: '**/*.zip')
			fileset (dir: tmpPluginXml.parentFile, includes: tmpPluginXml.name)
			manifest {
				attribute(name: 'Bundle-Version', value: version)
				attribute(name: 'Bundle-Name', value: "Resources from $host")
				attribute(name: 'Bundle-ManifestVersion', value: 2)
				attribute(name: 'Bundle-SymbolicName', value: "$symbolicName;singleton:=true")
			}
		}
	}
}
