buildscript {
	repositories {
		maven { // wetransform artifactory
			url 'https://artifactory.wetransform.to/artifactory/libs-release/'
		}
		mavenCentral()
		maven {
			url 'http://oss.sonatype.org/content/repositories/snapshots/'
//			allowInsecureProtocol = true
		}
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath 'org.standardout:gradle-include-plugin:0.2.0'
		classpath 'org.standardout:bnd-platform:1.8.0-SNAPSHOT'
		classpath 'org.standardout:gradle-versioneye-plugin:1.1.1'
		classpath 'zipdiff:zipdiff:0.4'
		classpath 'org.codehaus.groovy:groovy-backports-compat23:2.3+'
		// when upgrading to newer gradle, 'osgi' plugin will not be available so uncomment below
		// https://plugins.gradle.org/plugin/biz.aQute.bnd.workspace
//		classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:6.3.1"
	}
	configurations.all {
		// ensure SNAPSHOTs are updated every time if needed
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	}
}

apply plugin: 'eclipse'
apply plugin: 'org.standardout.bnd-platform'
apply plugin: 'org.standardout.include'
apply plugin: 'org.standardout.versioneye'

defaultTasks 'clean', 'updateSiteZip'

repositories {
	maven { // wetransform artifactory
		url 'https://artifactory.wetransform.to/artifactory/libs-release/'
	}
	mavenCentral()
	maven { // XXX Snapshot artifacts (remove for release)
		url 'https://artifactory.wetransform.to/artifactory/libs-snapshot/'
	}
}

// platform version
version = '4.1.0'

ext {
	geotoolsVersion = '21.0'
	wicketVersion = '6.10.0'
}

include {
	// shared modules

	from 'modules/shared/default.gradle'

	from 'modules/shared/adaptions' // all adaptions

	from 'modules/resources' // resource bundles

	from('modules/shared/geotools.gradle') {
		geotools geotoolsVersion, [
			'geotools',
			'gt-cql',
			'gt-epsg-hsql',
			'gt-geojson',
			'gt-geometry',
			'gt-main',
			'gt-shapefile',
			'gt-render',
			'gt-wfs-ng'
		]
		// additional bundles are defined later
	}

	from('modules/shared/spring.gradle') {
		def v = '5.2.0.RELEASE'
		spring v, [
			'spring-beans',
			'spring-context',
			'spring-context-support',
			'spring-web',
			'spring-webmvc'
		]
		security v, [
			'spring-security-core',
			'spring-security-config',
			'spring-security-web',
			'spring-security-cas',
			'spring-security-openid',
			'spring-security-ldap'
		]
	}

	from('modules/shared/logging.gradle') {
		slf4jAndLogback '1.7.10', '1.0.13'
	}

	from 'modules/shared/orientdb.gradle', {
		orientGraphDB '1.5.1'
	}

	from 'modules/shared/poi.gradle', {
		poi('5.2.3', '4.1.2')
	}

	from('modules/shared/postgis.gradle') {
		postgis(
			'2.3.0', // PostGIS driver version
			'42.2.8', // PostgreSQL driver version
			[
				// buddies
				'eu.esdihumboldt.hale.io.jdbc',
				'net.sourceforge.schemacrawler'
			]
		)
	}

	from 'modules/shared/gemini-blueprint.gradle'

	from('modules/shared/wicket.gradle') {
		wicket(wicketVersion, [
			'wicket-core',
			'wicket-request',
			'wicket-util',
			'wicket-spring',
			'wicket-extensions'
		])
	}

	// TopoJSON support
	from 'modules/topojson-j.gradle'

	// ensures that always a fixed version of groovy-all is used as groovy dependency
	from 'modules/shared/groovy.gradle', {
		//XXX custom name is required w/ indy - problem is that Gradle still adds the normal groovy-all dependency
		groovyAll '2.5.19', true, 'groovy', false
	}

	// HALE specific modules

	from 'modules/schemacrawler.gradle'
	from 'modules/groovy-sandbox'
	from 'modules/zest' // Zest 2 Snapshot - TODO instead use official release
	from 'modules/wicket-bootstrap'
	from 'modules/slf4jplus-config'

	// CS3D dependencies for Styled Map View
	from 'modules/cs3d-map'

	// support bundles for jetty 8/9
	from 'modules/jetty-support'
	
	// MSSQL driver for Hale
	from 'modules/mssql-support'
	
	// SKOS api
	from 'modules/skos-support'

	from('modules/deegree') {
		deegree('3.4.13')
	}

}

configurations {
	// exclude bundles conflicting with JRE-provided packages
	platform.exclude group: 'javax.xml'
	platform.exclude group: 'javax.activation'
	platform.exclude group: 'xml-apis'
	platform.exclude group: 'dom4j'
	platform.exclude group: 'stax'
	platform.exclude group: 'org.w3c.dom'
	platform.exclude group: 'org.apache.batik'
	platform.exclude group: 'org.codehaus.woodstox'

	//org.apache.geronimo.specs.geronimo-stax-api_1.0_spec
	platform.exclude group: 'org.apache.geronimo.specs'


	/*
	 * They have to be excluded as just removing the version constraint on
	 * corresponding package imports is not enough - bundles that only have
	 * optional imports may still bind to them, as they have no explicit
	 * dependency on the system bundle.
	 */


	// fix OrientDB 1.5.1 dependenies (which were manually added to the artifactory)
	// the original verions are snapshots that no longer work with OrientDB 1.5.1
	platform {
		resolutionStrategy.eachDependency { DependencyResolveDetails details ->
			if (
					(details.requested.group == 'com.tinkerpop.blueprints' &&
						(details.requested.name == 'blueprints-core' || details.requested.name == 'blueprints-orient-graph')) ||
					(details.requested.group == 'com.tinkerpop.gremlin' &&
						(details.requested.name == 'gremlin-groovy' || details.requested.name == 'gremlin-java')) ||
					(details.requested.group == 'com.tinkerpop' && details.requested.name == 'pipes')
				) {
				// use custom version
				details.useVersion '2.5.0-orientDB151'
			}
		}

		// sshj: group name changed to com.hieronymous from net.schmizz (from version 11.0)
		resolutionStrategy.eachDependency { DependencyResolveDetails details ->
			if (details.requested.name == 'sshj' && details.requested.group == 'net.schmizz') {
				details.useTarget "com.hierynomus:sshj:${details.requested.version}"
			}
		}
	}
}

platform {
	fetchSources = true
	determineImportVersions = true
	addBndPlatformManifestHeaders = true
	auxVersionedSymbolicNames = true
	featureId = 'eu.esdihumboldt.hale.platform'
	featureName = 'HALE Target Platform Libraries'
	hashQualifierMap = file('version-history.json')
	defaultQualifierMap.baseDate = DAY // to have a rather short default length, that seldom has to be exceeded

	// uncomment and update with eclipse directory only during development
	//eclipseHome = new File('/Users/kapil/eclipse/eclipse-4.24-rcp/Eclipse.app/Contents/Eclipse')

	// override behavior for all bundles to prevent package uses conflicts for packages provided by the JRE
	override {
		// ensure javax.annotation imports are w/o version
		prependImport('javax.annotation.*')
		prependImport('org.apache.commons.logging.*')

		optionalImport(
				// no version requirement for certain JRE provided packages
				// use wildcards to not enforce imports
				// use optional imports as otherwise we suddenly get errors in Eclipse while resolving seemingly random optional(!) package imports
				'javax.xml.*',
				'org.w3c.dom.*',
				'org.xml.sax.*',
				'javax.activation.*',
				'com.sun.xml.internal.*',
				// cal10n.api
				'javax.tools.*',
				'javax.lang.model.*',
				'javax.annotation.processing.*',
				// also make JUnit optional everywhere - so we can exclude it from products
				'junit.framework.*',
				'org.junit.*',
				'xml-apis.*',
				'jakarta.xml.*'
		)
	}

	// geotools additional bundles not in the default group
	bundle group: 'org.geotools.jdbc', name: 'gt-jdbc-oracle', version: geotoolsVersion
	bundle group: 'org.geotools.xsd', name: 'gt-xsd-core', version: geotoolsVersion
	bundle group: 'org.geotools.xsd', name: 'gt-xsd-gml2', version: geotoolsVersion
	bundle group: 'org.geotools.xsd', name: 'gt-xsd-gml3', version: geotoolsVersion

	bnd group: 'org.locationtech.jts', name: 'jts-core', {
		instruction 'Export-Package', "*;version=$version"
	}

	// Exclude in favour of later version pulled in by GeoPackage
	bundle group: 'org.geotools', name: 'geotools', {
		exclude module: 'org.xerial.sqlite-jdbc'
	}

	// hale connect APIs
	bundle 'com.haleconnect.api:haleconnect-user-api:1.0.2'
	bundle 'com.haleconnect.api:haleconnect-bucket-api:1.0.1'
	bundle 'com.haleconnect.api:haleconnect-projectstore-api:1.6.0'
	bundle 'com.haleconnect.api:haleconnect-project-api:0.1.0'

	// security
	bundle 'org.jasig.cas:cas-client:3.1.10'

	// utilities
	bundle 'com.google.guava:guava:15.0'
	bundle 'net.sf.trove4j:trove4j:2.0.4' // with version 3 some packages have changed
	bnd group: 'net.sf.trove4j', name: 'trove4j', {
		instructions 'Eclipse-BuddyPolicy': 'registered'
	}
	bundle 'commons-io:commons-io:2.4'
	bundle 'net.sf.ehcache:ehcache-core:2.6.6'
	bundle 'org.apache.velocity:velocity:1.6.2'
	bundle 'org.apache.xmlbeans:xmlbeans:5.1.1'
	bundle 'com.iabcinc:jmep:0.1.0'
	bundle 'com.google.code.findbugs:jsr305:2.0.3'
	bundle 'eu.esdihumboldt.hale:prefixmapper:1.0.1'
	bundle 'joda-time:joda-time:2.3'

	bundle 'cglib:cglib:2.2.2'
	bundle 'asm:asm-util:3.3.1' // optional dependency to cglib
	bundle 'asm:asm-analysis:3.3.1'

	// ivy with at least 2.4 because of bug in IvySettings
	bundle 'org.apache.ivy:ivy:2.4.0'

	// web stuff
	bundle 'commons-fileupload:commons-fileupload:1.3.1'
	bundle 'org.openid4java:openid4java:0.9.8'
	bundle 'net.tanesha.recaptcha4j:recaptcha4j:0.0.8'
	bundle "org.wicketstuff:wicketstuff-html5:$wicketVersion"
	// https://mvnrepository.com/artifact/org.codehaus.groovy.modules.http-builder/http-builder
	bundle 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'


	// fluent HTTP client API
	bundle 'org.apache.httpcomponents:fluent-hc:4.5.13'

	// prometheus client for providing metrics
	bundle 'io.prometheus:simpleclient:0.16.0'
	bnd group: 'io.prometheus', name: 'simpleclient', {
		optionalImport 'io.prometheus.client.exemplars.tracer.*'
	}

	// Async HTTP client
//	bundle 'com.ning:async-http-client:1.8.15'

	// quartz scheduler
	bundle 'org.quartz-scheduler:quartz:1.7.3'

	// XML
//	bundle 'org.apache.ws.xmlschema:xmlschema-core:2.0.2'
	bundle 'org.apache.ws.commons.schema:XmlSchema:1.4.7'
	bundle 'org.codehaus.castor:castor-xml:1.4.1', {
		bnd {
			instruction 'Import-Package', 'org.springframework.*'
			addQualifier = true
		}
	}

	bundle 'org.codehaus.castor:castor-core:1.4.1'

	// Units of Measurement
	bundle 'systems.uom:systems-common-java8:0.7.2'
	bundle 'systems.uom:systems-quantity:0.7.2'

	bnd group: 'com.sun.istack', name: 'istack-commons-runtime', {
		// suppress Require-Capability: osgi.ee;filter:="(&(osgi.ee=JavaSE)(version=9))" generated by bnd
		instruction '-removeheaders', 'Require-Capability'
	}
	bnd group: 'com.sun.xml.fastinfoset', name: 'FastInfoset', {
		// suppress Require-Capability: osgi.ee;filter:="(&(osgi.ee=JavaSE)(version=9))" generated by bnd
		instruction '-removeheaders', 'Require-Capability'
	}
	bundle 'org.glassfish.jaxb:jaxb-runtime:4.0.1' , {
		bnd {
		// suppress Require-Capability: osgi.ee;filter:="(&(osgi.ee=JavaSE)(version=9))" generated by bnd
		instruction '-removeheaders', 'Require-Capability'
		}
	}

	bundle 'org.glassfish.jaxb:jaxb-core:4.0.1', {
		bnd {
			// suppress Require-Capability: osgi.ee;filter:="(&(osgi.ee=JavaSE)(version=9))" generated by bnd
			instruction '-removeheaders', 'Require-Capability'
		}
	}

	bnd group: 'org.glassfish.jaxb', name: 'txw2', {
		// suppress Require-Capability: osgi.ee;filter:="(&(osgi.ee=JavaSE)(version=9))" generated by bnd
		instruction '-removeheaders', 'Require-Capability'
	}
	bnd group: 'org.jvnet.staxex', name: 'stax-ex', {
		// suppress Require-Capability: osgi.ee;filter:="(&(osgi.ee=JavaSE)(version=9))" generated by bnd
		instruction '-removeheaders', 'Require-Capability'
	}

	bnd group: 'org.reflections', name: 'reflections', {
		prependImport 'com.google.common.*;version=20'
	}

	bnd group: 'net.tanesha.recaptcha4j', name: 'recaptcha4j', {
		instruction '-removeheaders', 'Require-Capability'
	}

	// staxon
	bundle 'de.odysseus.staxon:staxon:1.3'

	// jackson 1
	bundle 'org.codehaus.jackson:jackson-core-asl:1.9.13', {
		bnd {
			symbolicName = 'org.codehaus.jackson'
		}
	}
	bundle 'org.codehaus.jackson:jackson-mapper-asl:1.9.13', {
		bnd {
			symbolicName = 'org.codehaus.jackson.mapper'
		}
	}
	// jackson 2
	bundle 'com.fasterxml.jackson.core:jackson-core:2.3.2'
	bundle 'com.fasterxml.jackson.core:jackson-databind:2.3.2' , {
		bnd {
			optionalImport group: 'javax.xml'
		}
	}

	// https://mvnrepository.com/artifact/com.fasterxml.jackson.jaxrs/jackson-jaxrs-base
	bundle 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:2.13.4'

	// https://mvnrepository.com/artifact/com.fasterxml.jackson.jaxrs/jackson-jaxrs-json-provider
	bundle 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.13.4'

	// https://mvnrepository.com/artifact/com.github.jnr/jnr-ffi
	bundle 'com.github.jnr:jnr-ffi:2.2.12'

	// suppress Require-Capability: osgi.ee;filter:="(&(osgi.ee=JavaSE)(version=9))" generated by bnd
	bnd group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', {
		instruction '-removeheaders', 'Require-Capability'
	}

	// suppress Require-Capability: osgi.ee;filter:="(&(osgi.ee=JavaSE)(version=9))" generated by bnd
	bnd group: 'org.ow2.asm', name: 'asm', {
		instruction '-removeheaders', 'Require-Capability'
	}

	bundle 'com.vladsch.flexmark:flexmark-all:0.64.0'
	//suppress Require-Capability: osgi.ee;filter:="(osgi.ee=UNKNOWN)" generated by bnd
	bnd group: 'com.vladsch.flexmark',  {
		instruction '-removeheaders', 'Require-Capability'
	}


	// spring osgi legacy
	bundle 'de.cs3d.thirdparty:springframework-osgi-web-mini:2.0.0.M1'

	// CSV
	bundle 'net.sf.opencsv:opencsv:2.3'

	// CLI (needed for using Groovy CLI builder)
	bundle 'commons-cli:commons-cli:1.3.1'

	// resources (partly replaced by resources module)
	bundle group: 'eu.esdihumboldt.util.resource', name: 'schemas.citygml', version: '1.0.0.20120927'
	//bundle group: 'eu.esdihumboldt.util.resource', name: 'schemas.opengis.net', version: '1.0.0.201202131112'
	//bundle group: 'eu.esdihumboldt.util.resource', name: 'schemas.inspire', version: '1.0.0.20120927'
	bundle group: 'eu.esdihumboldt.util.resource', name: 'schemas.test', version: '1.0.0.201205101531'

	//jaxb stuff
//	https://mkyong.com/java/jaxbexception-implementation-of-jaxb-api-has-not-been-found-on-module-path-or-classpath/
	bundle 'com.sun.xml.bind:jaxb-core:2.2.11'
	bundle 'com.sun.xml.bind:jaxb-core:4.0.1', {
		bnd {
		// suppress Require-Capability: osgi.ee;filter:="(osgi.ee=UNKNOWN)" generated by bnd
		instruction '-removeheaders', 'Require-Capability'
		}
	}

	bundle 'com.sun.xml.bind:jaxb-impl:4.0.1', {
		bnd {
			// suppress Require-Capability: osgi.ee;filter:="(osgi.ee=UNKNOWN)" generated by bnd
			instruction '-removeheaders', 'Require-Capability'
		}
	}
	bundle 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0', {
		bnd {
			// suppress Require-Capability: osgi.ee;filter:="(osgi.ee=UNKNOWN)" generated by bnd
			instruction '-removeheaders', 'Require-Capability'
		}
	}
	bundle 'jakarta.xml.bind:jakarta.xml.bind-api-test:3.0.1', {
		bnd {
			// suppress Require-Capability: osgi.ee;filter:="(osgi.ee=UNKNOWN)" generated by bnd
			instruction '-removeheaders', 'Require-Capability'
		}
	}
	bundle 'jakarta.xml.bind:jakarta.xml.bind-api-parent:4.0.0', {
		bnd {
			// suppress Require-Capability: osgi.ee;filter:="(osgi.ee=UNKNOWN)" generated by bnd
			instruction '-removeheaders', 'Require-Capability'
		}
	}
	bnd group:'org.jvnet.jaxb2_commons', name:'jaxb2-basics-runtime', {
		optionalImport 'com.sun.xml.*'
	}

	/*
	 * XXX Orient graph DB hack
	 *
	 * The tinkerpop blueprints implementation for OrientDB (at least in version 1.5.1 of OrientDB)
	 * is not compatible with the OrientDB version itself - probably because it is a SNAPSHOT.
	 * As workaround for resolving the packages we remove the version contraints on its orient imports.
	 * FIXME Instead rather specific versions of the tinkerpop libraries or a local snapshot that
	 * is guaranteed to be compatible should be used.
	 */
	bnd(group: 'com.tinkerpop.blueprints', name: 'blueprints-orient-graph') {
		instruction 'Import-Package', 'com.orientechnologies.*,' + (properties['Import-Package']?:'*')
	}

	/*
	 * Override bundle symbolic names (e.g. org.objectweb.asm) as they collide with
	 * bundles provided via an Eclipse update site, and both versions cannot be
	 * included in the (plugin-based) product if the symbolic name is the same.
	 *
	 * The problem seems to persist with feature-based products as well, even
	 * as the Tycho build seems to be able to handle it given fixed versions in
	 * the feature, Eclipse will not create the Run Configuration accordingly and
	 * will not validate the product correctly.
	 */
	bnd group: 'org.ow2.asm', {
		// -> use versioned symbolic names
		def ov = org.osgi.framework.Version.parseVersion(version)
		symbolicName = symbolicName + '-' + ov.major
	}
	bnd group: 'org.ow2.asm', name: 'asm-commons', {
		// -> use versioned symbolic names
		def ov = org.osgi.framework.Version.parseVersion(version)
		// and fix problem with null symbolic name
		symbolicName = 'org.ow2.asm.commons-' + ov.major
	}

	// ensure optional jdi imports for javassist
	// not sure why bnd-platform adds those
	bnd group: 'org.javassist', name: 'javassist', {
		optionalImport 'com.sun.jdi.*'
	}

	// force package export versions for hsqldb
	bnd group: 'org.hsqldb', name: 'hsqldb', {
		instruction 'Export-Package', "*;version=$version"
	}

	bnd group: 'jakarta.activation', name: 'jakarta.activation-api', {
		optionalImport 'com.sun.activation.registeries'
	}

	bnd group: 'org.apache.ws.commons.schema', name: 'XmlSchema', {
		optionalImport 'org.w3c.dom'
	}

	bundle 'xerces:xercesImpl:2.12.2'

	imports 'com.google.guava:guava', {
		versionStrategy = MINIMUM
	}

	// HALE FME plugin
	bundle 'de.fhg.igd.hale:fme-exec:1.1.0'
	bundle 'de.fhg.igd.hale:fme-ui:1.3.0'
	bundle 'de.fhg.igd.hale:fme-doc:1.1.0'


	// force package export versions
	bnd group: 'com.hierynomus', name: 'sshj', {
		instruction 'Export-Package', "*;version=$version"
	}
	bnd group: 'ch.qos.cal10n', name: 'cal10n-api', {
		instruction 'Export-Package', "*;version=$version"
	}

	//bundle for docker client
	def dockerClientVersion = '2.7.7'
	feature(id: 'com.spotify.docker-client', name: 'Spotify docker client and dependencies', version: dockerClientVersion) {
		plugin group:'com.spotify', name:'docker-client', version: dockerClientVersion

		// a jnr-unixsocket version that already includes proper OSGi headers
		plugin 'com.github.jnr:jnr-unixsocket:0.12'
	}
	bnd group: 'com.github.jnr', {
		optionalImport 'sun.misc.*'
	}
	// configuration for jffi native stuff (needed for docker client)
	/*
	bnd group: 'com.github.jnr', name: 'jffi', classifier: 'native', {
		symbolicName = 'com.github.jnr.jffi.native'
		instruction 'Fragment-Host', 'com.github.jnr.jffi'
		instruction 'Require-Bundle', 'com.github.jnr.jffi'
		instruction 'Bundle-ClassPath', '.,jni'
		instruction 'Export-Package', '!'
		instruction 'Private-Package', '*'
	}
	*/

	bnd 'commons-dbcp:commons-dbcp', {
		// dbcp must be able to access database drivers (though not directly relevant for HALE)
		instruction 'DynamicImport-Package', '*'
	}

	// typesafe configuration library
	bundle group:'com.typesafe', name:'config', version:'1.2.1'

	merge {
		// merged bundle for javax.annotation packages
		// because otherwise only one fragment seems to be used to provide
		// the javax.annotation package resulting in missing classes
		match {
			// merge all artifacts in org.geotools group, but not gt-opengis
			(it.group == 'javax.annotation' && it.name == 'javax.annotation-api') ||
					(it.group == 'com.google.code.findbugs' && it.name == 'jsr305')
		}

		bnd {
			symbolicName = 'javax.annotation.extensions'
			bundleName = 'javax.annotation Extensions'
			version = '1.2' // version should be equal to javax.annotation-api module version
			instruction 'Fragment-Host', 'system.bundle;extension:=framework'
			instruction 'Export-Package', "javax.annotation.*;version=$version;-noimport:=true"
			instruction 'Import-Package', '*'
		}
	}

	// MSAccess
	bundle 'net.sf.ucanaccess:ucanaccess:3.0.6', {
		bnd {
			def buddies = ['eu.esdihumboldt.hale.io.jdbc', 'net.sourceforge.schemacrawler']

			if (buddies) {
				// register buddy
				instruction 'Eclipse-RegisterBuddy', buddies.join(',')
				// add as optional required bundle
				instruction 'Require-Bundle', buddies.collect{
					it + ';resolution:=optional'
				}.join(',')
			}
		}
	}
	bnd group: 'com.healthmarketscience.jackcess', name: 'jackcess', {
		instruction 'Export-Package', "*;version=$version"
	}

	// better assertions
	bundle("org.assertj:assertj-core:3.22.0")

	// Allure test framework
	bundle 'ru.yandex.qatools.allure:allure-junit-adaptor:1.5.0', {
		exclude module: 'slf4j-nop'
		// exclude junit - is provided by Eclipse
		// also, adaptions to the manifest would be necessary (exported package version for 3.x packages)
		exclude module: 'junit'
	}
	bnd group: 'ru.yandex.qatools.allure', name: 'allure-java-adaptor-api', {
		// tika exported package version does not seem to resemble bundle version
		instruction 'Import-Package', 'org.apache.tika.*;version="[1.0.0,2.0.0)",*'
	}
	bnd group: 'ru.yandex.qatools.allure', name: 'allure-java-aspects', {
		// see http://wiki.eclipse.org/Equinox_Weaving_QuickStart
		instruction 'Export-Package', "ru.yandex.qatools.allure.aspects;version=$version;aspects=\"AllureAttachAspects,AllureStepsAspects,AllureParametersAspects\",*;version=$version"
	}
	bundle 'org.aspectj:aspectjweaver:1.8.3'

	// https://mvnrepository.com/artifact/javax.transaction/javax.transaction-api
	bundle 'javax.transaction:javax.transaction-api:1.3', {
		bnd {
			// istack seems to be part of the bundle and reimporting it fails because of a version issue
			optionalImport 'javax.enterprise.context'
			optionalImport 'javax.enterprise.util'
			optionalImport 'javax.interceptor'

		}
	}

	bnd group: 'org.eclipse.jetty', name: 'jetty-plus', {
		optionalImport 'javax.transaction'
	}


	bnd group: 'net.sf.ezmorph', name: 'ezmorph', {
		instruction '-removeheaders', 'Require-Capability'
	}

	// YAML library
	bundle 'org.yaml:snakeyaml:1.21'

	// Pebble template engine
	def pebbleVersion = '3.0.1'
	feature(id: 'io.pebbletemplates.pebble', name: 'Pebble template engine', version: pebbleVersion) {
		plugin "io.pebbletemplates:pebble:${pebbleVersion}"
	}
	bnd group: 'com.coverity.security', name: 'coverity-escapers', {
		// suppress Require-Capability: osgi.ee;filter:="(&(osgi.ee=JavaSE)(version=1.1))" generated by bnd
		instruction '-removeheaders', 'Require-Capability'
	}
	bnd group: 'com.github.ben-manes.caffeine', name: 'caffeine', {
		// force package export versions
		instruction 'Export-Package', "*;version=$version"
	}

	// Geopackage library
	def gpkgVersion = '3.4.0'
	def ormliteVersion = '5.1' // see gpkg deps
	bundle "mil.nga.geopackage:geopackage:$gpkgVersion", {
		// avoid jackson update
		exclude module: 'jackson-databind'
	}
	// merge bundle (because there are shared packages)
	merge {
		match {
			it.group != null && it.group.startsWith('mil.nga.geopackage') && it.name.startsWith('geopackage')
		}

		bnd {
			symbolicName = 'mil.nga.geopackage'
			bundleName = 'Geopackage Java'
			version = gpkgVersion
			instruction 'Export-Package', "*;version=$gpkgVersion"
		}
	}
	// merge ormlite bundle (because there are shared packages)
	merge {
		match {
			it.group != null && it.group.startsWith('com.j256.ormlite') && it.name.startsWith('ormlite')
		}

		bnd {
			symbolicName = 'com.j256.ormlite'
			bundleName = 'ormlite'
			version = ormliteVersion
			instruction 'Export-Package', "*;version=$ormliteVersion"

			// need to be able to access sqlite JDBC driver
			optionalImport 'org.sqlite'
		}
	}
	bnd group: 'mil.nga.sf', name: 'sf-geojson', {
		prependImport 'com.fasterxml.jackson.*' // remove import versions (because we use an older jackson version)
	}
	// force correct package export versions for sqlite-jdbc
	bnd group: 'org.xerial', name: 'sqlite-jdbc', {
		instruction 'Export-Package', "*;version=$version"
	}

	// library fixes
	//
	// suppress Require-Capability: osgi.ee;filter:="(&(osgi.ee=JavaSE)(version=1.1))" generated by bnd - Eclipse chokes on it
	bnd group: 'org.apache.xml', name: 'xml-commons-resolver', {
		instruction '-removeheaders', 'Require-Capability'
	}
	bnd group: 'xml-resolver', name: 'xml-resolver', {
		instruction '-removeheaders', 'Require-Capability'
	}
}

dependencies {
  platform 'de.fhg.igd:osgi-util:1.0', {
    // exclude OSGi dependencies (we include Equinox/Eclipse through separate update site)
    exclude module: 'org.eclipse.osgi'
    exclude module: 'org.osgi.compendium'
  }
}

dependencies {
	// additional versions of Google Guava
	//XXX Guava is too basic, multiple versions result in a bunch of package uses conflicts
//	platformaux 'com.google.guava:guava:14.0.1'
//	platformaux 'com.google.guava:guava:11.0.2'
}

// build jaxb projects
subprojects { subproject ->
  if (subproject.parent?.name == "jaxb") {
	apply plugin: 'java'
	apply plugin: 'osgi'

	repositories {
	  maven { // wetransform artifactory
		url 'https://artifactory.wetransform.to/artifactory/libs-release/'
	  }
	  mavenCentral()
	}

	configurations {
		jaxb
	}

	dependencies {
		jaxb 'com.sun.xml.bind:jaxb-xjc:4.0.1'
		jaxb 'com.sun.xml.bind:jaxb-impl:4.0.1'
//		as per the documentation this should be commented
		// https://docs.gradle.org/current/userguide/upgrading_version_4.html#rel5.0:jaxb_and_java9
		jaxb 'javax.xml.bind:jaxb-api:2.3.0'
		jaxb 'org.glassfish.jaxb:jaxb-xjc:4.0.1'

		jaxb 'org.glassfish.jaxb:jaxb-core:4.0.1'
		jaxb 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
		jaxb 'jakarta.xml.bind:jakarta.xml.bind-api-test:3.0.1'
		jaxb 'jakarta.xml.bind:jakarta.xml.bind-api-parent:4.0.0'
		jaxb 'org.glassfish.jaxb:jaxb-runtime:4.0.0'

	}


	sourceCompatibility = JavaVersion.VERSION_1_7
	targetCompatibility = JavaVersion.VERSION_1_7

	def generatedSources = subproject.file('src/main/java')

	task cleanSrc()  {
		doLast {
			generatedSources.deleteDir()
		}
	}

	task xjc {
		doLast {
			generatedSources.mkdirs()
			ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.jaxb.asPath)
			ant.xjc(destdir: generatedSources) {
				schema(dir: subproject.file('schema'), includes: '*.xsd')
				binding(dir: subproject.file('schema'), includes: 'bindings.xml')
			}
		}
	}

	// package source into a jar file
	task packageSources(type: Jar, dependsOn: 'xjc') {
		from sourceSets.main.allSource
		classifier = 'sources'
	}

	tasks.xjc.dependsOn('cleanSrc')
	tasks.clean.dependsOn('cleanSrc')
	tasks.compileJava.dependsOn('xjc')

	// let main project depend on jar task
	rootProject.tasks.bundles.dependsOn(tasks.jar)
	// ...and on packaged sources
	rootProject.tasks.bundles.dependsOn(tasks.packageSources)

	// add produced jar to platform
	// sources jars will be automatically detected by bnd-platform
	def jars = tasks.jar.outputs.files
	configure(rootProject) {
	  platform {
		bundle(jars)
	  }
	}
  }
}

project.ext {
	updateSiteMergeDir = file('../hale-build-support/updatesites/platform')
	mergeBasedOnVersion = [
		// regular expressions matched against the file name

		// generated jaxb sources
		/^eu\.esdihumboldt\.hale\..+\.jaxb\.source_\d+\.\d+.\d+\.jar$/
	]
}

def mergeOldJars(File targetFolder, File referenceFolder, String resourceName, boolean bndFallback) {
	def numReplaced = 0
	def numRetained = 0

	// test all new bundles
	targetFolder.eachFile(groovy.io.FileType.FILES) { File nb ->
		// if there is an old bundle with the same name
		File ob = new File(referenceFolder, nb.name)
		if (ob.exists()) {
			boolean replace = project.ext.mergeBasedOnVersion.any {
				ob.name ==~ it
			}
			if (replace) {
				logger.warn("Using previously created version of $nb.name without difference check")
			}

			// compare files
			def diffcal = new zipdiff.DifferenceCalculator(ob, nb)
			diffcal.ignoreTimestamps = true
			diffcal.compareCRCValues = true
			def diff = diffcal.differences

			if (!replace && diff.hasDifferences()) {
				if (bndFallback) {
					// use bnd diff that does a real diff on the manifest headers
					def diffPlugin = new aQute.bnd.differ.DiffPluginImpl()
					def otree = diffPlugin.tree(ob)
					def ntree = diffPlugin.tree(nb)
					def bndDiff = ntree.diff(otree)

					switch (bndDiff.delta) {
						case aQute.bnd.service.diff.Delta.IGNORED:
						case aQute.bnd.service.diff.Delta.UNCHANGED:
							replace = true
							break
						default:
							replace = false
					}
				}
				else replace = false
			}
			else {
				replace = true
			}

			if (replace) {
				// replace new file with old/reference file
				ant.copy(file: ob, tofile: nb, overwrite: true)
				logger.info("Replaced $resourceName $nb.name with previously created version")
				numReplaced++
			}
			else {
				println diff.toString()
				numRetained++
			}
		}
		else {
			println "No reference $resourceName found for $nb.name"
			numRetained++
		}
	}

	println "Replaced $numReplaced ${resourceName}s with version (with equal content) from reference update site"
	println "Retained $numRetained ${resourceName}s that have changes compared to the current update site version"
}

/*
 * Merge with old update site in hale-build-support to prevent unnecessary
 * pollution of the hale-build-support repository.
 */
task mergeOldSite(dependsOn: [tasks.bundles, tasks.bundleFeatures]) {
	doLast {
		// bundles
		File newBundles = new File(project.buildDir, 'plugins')
		File oldBundles = new File(updateSiteMergeDir, 'plugins')

		if (oldBundles.exists()) {
			logger.warn("Attempting to merge existing update site at $oldBundles, may replace bundles with previously created bundles")
			mergeOldJars(newBundles, oldBundles, 'bundle', true)
		} else {
			logger.warn("Skipping merge with current update site content, as directory $oldBundles was not found")
		}

		// features
		File newFeatures = new File(project.buildDir, 'features')
		File oldFeatures = new File(updateSiteMergeDir, 'features')

		if (oldFeatures.exists()) {
			logger.warn("Attempting to merge existing update site at $oldFeatures, may replace features with previously created features")
			mergeOldJars(newFeatures, oldFeatures, 'feature', false)
		} else {
			logger.warn("Skipping merge with current update site content, as directory $oldFeatures was not found")
		}
	}
}
tasks.updateSite.dependsOn mergeOldSite

/**
 * Tasks that mirror essential update sites.
 */
def json = new groovy.json.JsonSlurper()
def updateSites
file('p2.json').withReader {
	updateSites = json.parse(it)
}

updateSites.each { name, siteUrl ->

	task("download-p2-$name", dependsOn: 'checkEclipse').doLast {
		assert project.platform.eclipseHome
		def eclipseHome = project.platform.eclipseHome.absolutePath
		
		// find launcher jar
		def launcherFiles = project.ant.fileScanner {
			fileset(dir: eclipseHome) {
				include(name: 'plugins/org.eclipse.equinox.launcher_*.jar')
			}
		}
		def launcherJar = launcherFiles.iterator().next()
		assert launcherJar
		
		project.logger.info "Using Eclipse at $eclipseHome for p2 repository mirroring."

		def mirrorDir = new File(new File(project.buildDir, 'p2-mirrors'), name)

		/*
		 * Documentation on Mirroring:
		 * https://wiki.eclipse.org/Equinox_p2_Repository_Mirroring
		 * 
		 */
		
		def mirrorDirUri = URLDecoder.decode(mirrorDir.toURI().toString(), 'UTF-8')
		def updateSiteUri = URLDecoder.decode(siteUrl, 'UTF-8')

		// Mirroring of metadata
		
		project.exec {
			commandLine 'java', '-jar', launcherJar,
				'-application', 'org.eclipse.equinox.p2.metadata.repository.mirrorApplication',
				'-source', updateSiteUri,
				'-destination', mirrorDirUri,
				'-writeMode', 'clean'
		}

		// Mirroring of artifacts
		
		project.exec {
			commandLine 'java', '-jar', launcherJar,
				'-application', 'org.eclipse.equinox.p2.artifact.repository.mirrorApplication',
				'-source', updateSiteUri,
				'-destination', mirrorDirUri,
				// '-verbose',
				'-writeMode', 'clean'
		}
	}

	task("upload-p2-$name").doLast {
		def mirrorDir = new File(new File(project.buildDir, 'p2-mirrors'), name)

		def awsKey = project.hasProperty('builds.aws.key') ? project.getProperty('builds.aws.key') : System.getenv('AWS_ACCESS_KEY_ID')
		def awsSecret = project.hasProperty('builds.aws.secret') ? project.getProperty('builds.aws.secret') : System.getenv('AWS_SECRET_ACCESS_KEY')

		if (awsKey && awsSecret) {
			// upload to S3
			project.exec {
				commandLine 'aws', 's3', 'sync',
					mirrorDir,
					"s3://build-artifacts.wetransform.to/p2/mirror/$name",
					'--acl', 'public-read', '--delete', '--region', 'eu-central-1'
				environment 'AWS_ACCESS_KEY_ID', awsKey
				environment 'AWS_SECRET_ACCESS_KEY', awsSecret
			}
		}
	}

	task("mirror-p2-$name") {
		dependsOn "download-p2-$name"
		dependsOn "upload-p2-$name"
		tasks.findByName("upload-p2-$name").mustRunAfter "download-p2-$name"
	}

}

wrapper {
    gradleVersion = '4.10.2'
}
